<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxd.student_information.mapper.IStudentMapper">
    <select id="getAllStudent" resultType="map">
        select s.student_id,s.student_name,s.sex,s.folk,s.birthday,s.native_place,
        s.marital_status,s.id_number,s.graduate_school,s.major,s.img_path,
        s.remark,s.class_no,s.phone,s.isdeleted,d.dept_name from student s
        left join dept d on s.dept_no = d.dept_no
        <where>
            s.isdeleted = 1
            <if test="student_name != null and student_name != '' ">
                and s.student_name like concat('%',#{student_name},'%')
            </if>
            <if test="class_no != 0">
                and s.class_no = #{class_no}
            </if>
        </where>
    </select>

    <select id="getAllStudentByPage" resultType="map">
        select s.student_id,s.student_name,s.sex,s.folk,s.birthday,s.native_place,
        s.marital_status,s.id_number,s.graduate_school,s.major,s.img_path,
        s.remark,s.class_no,s.phone,s.isdeleted,d.dept_name from student s
        left join dept d on s.dept_no = d.dept_no
        <where>
            s.isdeleted = 1
            <if test="student_name != null and student_name != '' ">
                and s.student_name like concat('%',#{student_name},'%')
            </if>
            <if test="class_no != 0">
                and s.class_no = #{class_no}
            </if>
        </where>
        order by s.student_id limit #{pageIndex}, #{pageSize}
    </select>

    <!--新增学员-->
    <insert id="addStudents">
        insert into student(student_name, sex, class_no, folk, birthday, marital_status, native_place, id_number, graduate_school, phone, major, remark, img_path, dept_no,isdeleted)
        values (#{studentName},#{sex},#{classNo},#{folk},#{birthday},#{maritalStatus},#{nativePlace},#{idNumber},#{graduateSchool},#{phone},#{major},#{remark},#{imgPath},1,1);
--       新增到学校评价表
        insert into evaluation_of_school(student_id,class_no)
            values((select student_id from student order by student_id DESC limit 1),#{classNo});
--       新增到部门评价表
        insert into evaluation_of_dept(student_id,dept_no,period_no)
            values((select student_id from student order by student_id DESC limit 1),1,1);
        insert into evaluation_of_dept(student_id,dept_no,period_no)
            values((select student_id from student order by student_id DESC limit 1),1,2);
        insert into evaluation_of_dept(student_id,dept_no,period_no)
            values((select student_id from student order by student_id DESC limit 1),1,3);
        insert into evaluation_of_dept(student_id,dept_no,period_no)
            values((select student_id from student order by student_id DESC limit 1),1,4);
--      新增到课程成绩
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),1);
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),2);
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),3);
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),4);
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),5);
        insert into course_score(student_id,course_id)
            values ((select student_id from student order by student_id DESC limit 1),6);

-- 新增到能力成绩
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),1,1);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),1,2);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),1,3);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),1,4);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),2,1);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),2,2);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),2,3);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),2,4);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),3,1);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),3,2);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),3,3);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),3,4);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),4,1);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),4,2);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),4,3);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),4,4);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),5,1);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),5,2);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),5,3);
               insert into quality_score(student_id,quality_id,period_no)
            values ((select student_id from student order by student_id DESC limit 1),5,4);
    </insert>

    <update id="delStudent">
        update student set isdeleted = 0
        where student_id = #{studentId}
    </update>

    <update id="delSelectStu">
        update student set isdeleted = 0
        where student_id in (
        <foreach collection="stu_id" item="stu_ids" separator=",">
        #{stu_ids}
        </foreach>
        )

    </update>

    <update id="editStudent">
        update student set student_name = #{studentName}, sex = #{sex}, class_no = #{classNo},
        folk = #{folk}, birthday = #{birthday}, marital_status = #{maritalStatus}, phone = #{phone},
        native_place = #{nativePlace}, id_number = #{idNumber}, graduate_school = #{graduateSchool},
        major = #{major}, remark = #{remark}, img_path = #{imgPath}, dept_no = #{deptNo}
        where
        student_id = #{studentId};

        update evaluation_of_school set class_no = #{classNo}
        where
        student_id = #{studentId};

        update evaluation_of_dept set dept_no = #{deptNo}
        where
        student_id = #{studentId};
    </update>

    <!--查询学生信息===用户（cbb）-->
    <select id="selectStudentWithUserById" resultType="java.util.Map">
        SELECT
            student_id,
            student_name,
            sex,
            folk,
            birthday,
            native_place,
            marital_status,
            id_number,
            graduate_school,
            major,
            img_path,
            remark,
            class_no,
            phone,
            dept_name
        FROM
            student s
            LEFT JOIN dept d ON d.dept_no = s.dept_no
        WHERE
            student_id = #{studentId}
    </select>
</mapper>
